from PIL import Image, ImageDraw, ImageFont
import os
import openai
import asyncio
from telegram import Bot, InputMediaPhoto
import random
import time
from datetime import datetime

# API-–∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = ""
CHANNEL_ID = ""

# API-–∫–ª—é—á OpenAI
openai.api_key = ""

# –ü–∞–ø–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
TEMP_IMAGE_PATH = "./horoscope_images"
TARO_PATH = os.path.join(os.path.expanduser("~"), "Desktop", "TARO")
os.makedirs(TEMP_IMAGE_PATH, exist_ok=True)

# –°–ø–∏—Å–æ–∫ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
ZODIAC_SIGNS = [
    "–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫",
    "–õ–µ–≤", "–î–µ–≤–∞", "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω",
    "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"
]

# –ü—Ä–∏–º–µ—Ä –∫–∞—Ä—Ç –¢–∞—Ä–æ
TARO_CARDS = [
    {"name": "–®—É—Ç", "image": os.path.join(TARO_PATH, "fool.jpg.webp")},
    {"name": "–ú–∞–≥", "image": os.path.join(TARO_PATH, "magician.jpg.webp")},
    {"name": "–ñ—Ä–∏—Ü–∞", "image": os.path.join(TARO_PATH, "high_priestess.jpg.webp")},
    {"name": "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "image": os.path.join(TARO_PATH, "empress.jpg.webp")},
    {"name": "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "image": os.path.join(TARO_PATH, "emperor.jpg.webp")},
    {"name": "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç", "image": os.path.join(TARO_PATH, "hierophant.jpg.webp")},
    {"name": "–í–ª—é–±–ª—ë–Ω–Ω—ã–µ", "image": os.path.join(TARO_PATH, "lovers.jpg.webp")},
    {"name": "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "image": os.path.join(TARO_PATH, "chariot.jpg.webp")},
    {"name": "–°–∏–ª–∞", "image": os.path.join(TARO_PATH, "strength.jpg.webp")},
    {"name": "–û—Ç—à–µ–ª—å–Ω–∏–∫", "image": os.path.join(TARO_PATH, "hermit.jpg.webp")},
    {"name": "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "image": os.path.join(TARO_PATH, "wheel_of_fortune.jpg.webp")},
    {"name": "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", "image": os.path.join(TARO_PATH, "justice.jpg.webp")},
    {"name": "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "image": os.path.join(TARO_PATH, "hanged_man.jpg.webp")},
    {"name": "–°–º–µ—Ä—Ç—å", "image": os.path.join(TARO_PATH, "death.jpg.webp")},
    {"name": "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "image": os.path.join(TARO_PATH, "temperance.jpg.webp")},
    {"name": "–î—å—è–≤–æ–ª", "image": os.path.join(TARO_PATH, "devil.jpg.webp")},
    {"name": "–ë–∞—à–Ω—è", "image": os.path.join(TARO_PATH, "tower.jpg.webp")},
    {"name": "–ó–≤–µ–∑–¥–∞", "image": os.path.join(TARO_PATH, "star.jpg.webp")},
    {"name": "–õ—É–Ω–∞", "image": os.path.join(TARO_PATH, "moon.jpg.webp")},
    {"name": "–°–æ–ª–Ω—Ü–µ", "image": os.path.join(TARO_PATH, "sun.jpg.webp")},
    {"name": "–°—É–¥", "image": os.path.join(TARO_PATH, "judgment.jpg.webp")},
    {"name": "–ú–∏—Ä", "image": os.path.join(TARO_PATH, "world.jpg.webp")},
]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
def get_today_date():
    return datetime.now().strftime("%d.%m.%Y")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
def generate_horoscope(sign):
    prompt = f"–°–æ–∑–¥–∞–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ {sign} –≤ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º —Å—Ç–∏–ª–µ."
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "–¢—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤. –û—Ç–≤–µ—á–∞–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ, –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–º–æ–¥–∑–∏, –≤ –ø–µ—Ä–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–¥–∞ —É–ø–æ–º–∏–Ω–∞–π –∫ –∫–∞–∫–æ–º—É –∑–Ω–∞–∫—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑"},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message.content

def create_horoscope_image(sign, text, output_path):
    img_width, img_height = 1080, 1080
    background_color = (255, 255, 255)  # –ë–µ–ª—ã–π —Ñ–æ–Ω
    text_color = (0, 0, 0)  # –ß—ë—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    font_path = "/System/Library/Fonts/Supplemental/Arial.ttf"  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å —à—Ä–∏—Ñ—Ç–∞
    title_font_size = 70  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    text_font_size = 40  # –û–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    line_spacing = 20  # –ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = Image.new("RGB", (img_width, img_height), color=background_color)
    draw = ImageDraw.Draw(image)
    try:
        title_font = ImageFont.truetype(font_path, title_font_size)
        text_font = ImageFont.truetype(font_path, text_font_size)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞: {e}")
        return

    # –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title_bbox = draw.textbbox((0, 0), sign, font=title_font)
    title_width = title_bbox[2] - title_bbox[0]
    title_x = (img_width - title_width) / 2
    title_y = 50  # –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    draw.text((title_x, title_y), sign, font=title_font, fill=text_color)

    # –†–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    max_text_width = img_width - 100
    words = text.split()
    lines = []
    current_line = ""

    for word in words:
        test_line = f"{current_line} {word}".strip()
        test_line_bbox = draw.textbbox((0, 0), test_line, font=text_font)
        test_line_width = test_line_bbox[2] - test_line_bbox[0]
        if test_line_width <= max_text_width:
            current_line = test_line
        else:
            lines.append(current_line)
            current_line = word
    lines.append(current_line)

    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∏–∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    text_y_start = title_y + title_font_size + 50  # –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    total_text_height = len(lines) * (text_font_size + line_spacing)
    y_offset = text_y_start + (img_height - text_y_start - total_text_height) // 2

    for line in lines:
        line_bbox = draw.textbbox((0, 0), line, font=text_font)
        line_width = line_bbox[2] - line_bbox[0]
        draw.text(((img_width - line_width) / 2, y_offset), line, font=text_font, fill=text_color)
        y_offset += text_font_size + line_spacing

    try:
        image.save(output_path)
        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")




# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–ª–∏—è–Ω–∏—è —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–≥–æ –ú–µ—Ä–∫—É—Ä–∏—è
# def generate_mercury_effect():
#     prompt = "–û–ø–∏—à–∏ –≤–ª–∏—è–Ω–∏–µ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–≥–æ –ú–µ—Ä–∫—É—Ä–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ —Å–µ–≥–æ–¥–Ω—è."
#     response = openai.ChatCompletion.create(
#         model="gpt-3.5-turbo",
#         messages=[
#             {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ."},
#             {"role": "user", "content": prompt}
#         ]
#     )
#     return response.choices[0].message.content

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞
async def send_media_in_batches(bot, chat_id, media_files, batch_size=6, delay=5):
    for i in range(0, len(media_files), batch_size):
        batch = media_files[i:i + batch_size]
        media_group = [InputMediaPhoto(open(file, "rb")) for file in batch]
        try:
            await bot.send_media_group(chat_id=chat_id, media=media_group)
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –∏–∑ {len(batch)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä—É–ø–ø—ã: {e}")
        await asyncio.sleep(delay)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è
async def generate_card_of_the_day(bot):
    card = random.choice(TARO_CARDS)
    card_name = card["name"]
    card_image = card["image"]

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
    prompt = f"–°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ '{card_name}', –æ–±—ä—è—Å–Ω–∏ –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å–æ–≤–µ—Ç—ã –Ω–∞ –¥–µ–Ω—å."
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∞—Ä—Ç–∞–º –¢–∞—Ä–æ. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —è—Å–Ω–æ."},
            {"role": "user", "content": prompt}
        ]
    )
    card_description = response.choices[0].message.content

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç—ã –¥–Ω—è
    try:
        with open(card_image, "rb") as image_file:
            await bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=image_file,
                caption=f"üåü –ö–∞—Ä—Ç–∞ –¥–Ω—è ({get_today_date()}): {card_name}\n\n{card_description}"
            )
        print("–ö–∞—Ä—Ç–∞ –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã –¥–Ω—è: {e}")

# # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–ª–∏—è–Ω–∏—è —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–≥–æ –ú–µ—Ä–∫—É—Ä–∏—è
# async def generate_mercury_message(bot):
#     mercury_effect = generate_mercury_effect()
#     try:
#         await bot.send_message(
#             chat_id=CHANNEL_ID,
#             text=f"üìÖ –í–ª–∏—è–Ω–∏–µ –†–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–≥–æ –ú–µ—Ä–∫—É—Ä–∏—è ({get_today_date()}):\n\n{mercury_effect}"
#         )
#         print("–í–ª–∏—è–Ω–∏–µ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–≥–æ –ú–µ—Ä–∫—É—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–ª–∏—è–Ω–∏—è —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–≥–æ –ú–µ—Ä–∫—É—Ä–∏—è: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
async def main():
    bot = Bot(token=TELEGRAM_BOT_TOKEN)

    # –ì–æ—Ä–æ—Å–∫–æ–ø—ã
    horoscope_images = []
    for sign in ZODIAC_SIGNS:
        try:
            horoscope_text = generate_horoscope(sign)
            output_path = os.path.join(TEMP_IMAGE_PATH, f"{sign}.jpg")
            create_horoscope_image(sign, horoscope_text, output_path)
            horoscope_images.append(output_path)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è {sign}: {e}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤
    await send_media_in_batches(bot, CHANNEL_ID, horoscope_images)

    # –ö–∞—Ä—Ç–∞ –¥–Ω—è
    await generate_card_of_the_day(bot)

    # # –í–ª–∏—è–Ω–∏–µ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–≥–æ –ú–µ—Ä–∫—É—Ä–∏—è
    # await generate_mercury_message(bot)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())
